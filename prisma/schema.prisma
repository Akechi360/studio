generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
  Presidente
  Electromedicina
}

model User {
  id                        String                @id @default(cuid())
  displayId                 String?               @unique
  name                      String
  email                     String                @unique
  password                  String // Will store hashed password
  role                      Role                  @default(User)
  avatarUrl                 String?
  department                String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  emailOnNewTicket          Boolean               @default(true)
  emailOnNewComment         Boolean               @default(true)
  customAppName             String?

  ticketsCreated            Ticket[]              @relation("TicketsCreatedByUser")
  comments                  Comment[]
  inventoryItemsAdded       InventoryItem[]       @relation("InventoryAddedByUser")
  approvalRequestsCreated   ApprovalRequest[]     @relation("ApprovalRequestedByUser")
  approvalRequestsApproved  ApprovalRequest[]     @relation("ApprovalApprovedByUser")
  auditLogEntries           AuditLogEntry[]
  casosMantenimientoRegistered CasoDeMantenimiento[] @relation("CasoRegisteredByUser")
  casosMantenimientoLogEntries CasoMantenimientoLogEntry[] @relation("LogEntryByUser")

  // Relaciones para gestión de fallas
  fallasReportadas          Falla[]               @relation("FallasReportadas")
  fallasAsignadas           Falla[]               @relation("FallaAsignadaA")
  fallasBitacora            FallaBitacora[]       @relation("FallaBitacoraUsuario")

  @@index([email])
}

enum TicketPriority {
  Low
  Medium
  High
}

enum TicketStatus {
  Open
  InProgress
  Resolved
  Closed
}

enum TicketCategory {
  HardwareIssue
  SoftwareIssue
  NetworkIssue
  AppAccess
  InfoRequest
  EquipmentMaintenance
  PrintingIssue
  EmailIssue
  Other
}

model Ticket {
  id          String         @id @default(cuid())
  displayId   String         @unique
  subject     String
  description String         @db.Text
  priority    TicketPriority
  status      TicketStatus
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  category    TicketCategory   @default(Other)

  userId      String
  user        User           @relation("TicketsCreatedByUser", fields: [userId], references: [id])
  userName    String // Denormalized for easier display
  userEmail   String?
  comments    Comment[]
  attachments Attachment[]

  @@index([userId])
  @@index([status])
  @@index([priority])
}

model Comment {
  id        String   @id @default(cuid())
  displayId String   @unique
  text      String   @db.Text
  createdAt DateTime @default(now())

  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  userId    String
  user      User     @relation(fields: [userId], references: [id])
  userName  String // Denormalized
  userAvatarUrl String?
  @@index([ticketId])
  @@index([userId])
}

model Attachment {
  id       String  @id @default(cuid())
  displayId String @unique
  fileName String
  url      String // In a real app, this might point to a cloud storage URL
  size     Int
  type     String?
  ticketId String?
  ticket   Ticket? @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  approvalRequestId String?
  approvalRequest   ApprovalRequest? @relation(fields: [approvalRequestId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([approvalRequestId])
}

enum InventoryItemCategory {
  Computadora
  Monitor
  Teclado
  Mouse
  Impresora
  Escaner
  Router
  Switch
  Servidor
  Laptop
  Tablet
  Proyector
  TelefonoIP // Prisma enums cannot have spaces
  OtroPeriferico
  Software
  Licencia
  Otro
}

enum InventoryItemStatus {
  EnUso // Prisma enums cannot have spaces
  EnAlmacen
  EnReparacion
  DeBaja
  Perdido
}

enum RamOption {
  NoEspecificado
  RAM_2GB @map("2GB")
  RAM_4GB @map("4GB")
  RAM_8GB @map("8GB")
  RAM_12GB @map("12GB")
  RAM_16GB @map("16GB")
  RAM_32GB @map("32GB")
  RAM_64GB @map("64GB")
  Otro
}

enum StorageType {
  HDD
  SSD
  NoEspecificado
}

model InventoryItem {
  id            String                @id @default(cuid())
  displayId     String                @unique
  name          String
  category      InventoryItemCategory
  brand         String?
  model         String?
  serialNumber  String?               @unique
  processor     String?
  ram           RamOption?
  storageType   StorageType?
  storage       String?               // e.g., "512GB", "1TB"
  quantity      Int
  location      String?
  status        InventoryItemStatus
  notes         String?               @db.Text
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  purchaseDate  DateTime?             // Changed from String to DateTime for better querying
  supplier      String?
  warrantyEndDate DateTime?           // Changed from String to DateTime

  addedByUserId String
  addedByUser   User                  @relation("InventoryAddedByUser", fields: [addedByUserId], references: [id])
  addedByUserName String // Denormalized

  @@index([category])
  @@index([status])
  @@index([location])
  @@index([addedByUserId])
}

enum ApprovalRequestType {
  Compra
  PagoProveedor
}

enum ApprovalStatus {
  Pendiente
  Aprobado
  Rechazado
  InformacionSolicitada
}

enum PaymentType {
  Contado
  Cuotas
}

model ApprovalRequest {
  id            String              @id @default(cuid())
  displayId     String              @unique
  type          ApprovalRequestType
  subject       String
  description   String?             @db.Text
  status        ApprovalStatus
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  totalPaidAmount Float             @default(0)
  remainingAmount Float             @default(0)
  nextDueDate   DateTime?
  hasOverduePayments Boolean         @default(false)

  requesterId   String
  requester     User                @relation("ApprovalRequestedByUser", fields: [requesterId], references: [id])
  requesterName String // Denormalized
  requesterEmail String?
  approverId    String?
  approver      User?               @relation("ApprovalApprovedByUser", fields: [approverId], references: [id])
  approverName  String?
  approverComment String?           @db.Text
  approvedAt    DateTime?
  rejectedAt    DateTime?
  infoRequestedAt DateTime?

  // Purchase specific
  itemDescription String?
  estimatedPrice  Float?
  supplierCompra  String?
  // Payment specific
  supplierPago     String?
  totalAmountToPay Float?
  approvedAmount   Float?
  approvedPaymentType PaymentType?
  attachments       Attachment[]
  activityLog       ApprovalActivityLogEntry[]
  paymentInstallments PaymentInstallment[]

  @@index([requesterId])
  @@index([approverId])
  @@index([status])
  @@index([type])
  @@index([status, type])
  @@index([requesterId, status])
  @@index([approverId, status])
  @@index([hasOverduePayments])
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model PaymentInstallment {
  id                String          @id @default(cuid())
  displayId         String          @unique
  amount            Float
  dueDate           DateTime
  status            PaymentStatus   @default(PENDING)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  isOverdue         Boolean         @default(false)
  daysOverdue       Int             @default(0)

  approvalRequestId String
  approvalRequest   ApprovalRequest @relation(fields: [approvalRequestId], references: [id])

  @@index([approvalRequestId])
  @@index([status])
  @@index([dueDate])
  @@index([isOverdue])
  @@index([status, dueDate])
  @@index([approvalRequestId, status])
}

model ApprovalActivityLogEntry {
  id                String           @id @default(cuid())
  displayId         String
  approvalRequestId String
  approvalRequest   ApprovalRequest  @relation(fields: [approvalRequestId], references: [id])
  action            String
  userId            String
  userName          String
  userEmail         String
  timestamp         DateTime         @default(now())
  comment           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([approvalRequestId])
}


enum CasoMantenimientoStatus {
  Registrado
  PendientePresupuesto
  PresupuestoAprobado
  EnServicioReparacion @map("En Servicio/Reparación")
  PendienteRespaldo
  Resuelto
  Cancelado
}

enum CasoMantenimientoPriority {
  Baja
  Media
  Alta
  Critica @map("Crítica")
}

model CasoDeMantenimiento {
  id                       String                     @id @default(cuid())
  displayId                String                     @unique
  title                    String
  description              String                     @db.Text
  location                 String
  equipment                String?
  priority                 CasoMantenimientoPriority
  currentStatus            CasoMantenimientoStatus
  registeredAt             DateTime                   @default(now())
  assignedProviderName     String
  providerContactPerson    String?
  expectedResolutionDate   DateTime?
  lastFollowUpDate         DateTime?
  nextFollowUpDate         DateTime?
  resolutionDetails        String?                    @db.Text
  cost                     Float?
  invoicingDetails         String?                    @db.Text
  resolvedAt               DateTime?

  registeredByUserId       String
  registeredByUser         User                       @relation("CasoRegisteredByUser", fields: [registeredByUserId], references: [id])
  registeredByUserName     String // Denormalized

  log                      CasoMantenimientoLogEntry[]

  @@index([registeredByUserId])
  @@index([currentStatus])
  @@index([priority])
}

model CasoMantenimientoLogEntry {
  id                String              @id @default(cuid())
  displayId         String              @unique
  timestamp         DateTime @default(now())
  action            String
  notes             String   @db.Text
  statusAfterAction CasoMantenimientoStatus?

  userId            String
  user              User     @relation("LogEntryByUser", fields: [userId], references: [id])
  userName          String   // Denormalized

  casoId            String
  caso              CasoDeMantenimiento @relation(fields: [casoId], references: [id], onDelete: Cascade)

  @@index([casoId])
  @@index([userId])
}

model AuditLogEntry {
  id                String              @id @default(cuid())
  displayId         String              @unique
  timestamp         DateTime @default(now())
  // CORRECCIÓN: userEmail se hace opcional para permitir onDelete: SetNull
  userEmail         String?  // Email of the user performing the action

  action            String
  details           String?  @db.Text

  user              User?    @relation(fields: [userEmail], references: [email], onDelete: SetNull, onUpdate: Cascade)


  @@index([userEmail])
  @@index([action])
}

// --- MODELO DE GESTIÓN DE FALLAS ---

enum SeveridadFalla {
  CRITICA
  ALTA
  MEDIA
  BAJA
}

enum TipoFalla {
  ELECTRICA
  MECANICA
  SOFTWARE
  SENSOR
  CALIBRACION
  RUIDO_VIBRACION
  FUGA
  OTRO
}

enum EstadoFalla {
  REPORTADA
  EN_DIAGNOSTICO
  PENDIENTE_PIEZA
  EN_REPARACION_INTERNA
  ESCALADA_EXTERNO
  EN_CALIBRACION
  RESUELTA
  CERRADA
  DUPLICADA
  NO_SE_REPRODUCE
}

model Falla {
  id                String              @id @default(cuid())
  displayId         String              @unique
  titulo            String
  descripcion       String
  equipoId          String?  // Relación futura con InventoryItem
  equipoNombre      String
  equipoUbicacion   String
  equipoFabricante  String?
  equipoModelo      String?
  equipoNumeroSerie String?
  ubicacion         String
  severidad         SeveridadFalla
  tipoFalla         TipoFalla
  impacto           String?
  reportadoPorId    String
  reportadoPor      User     @relation("FallasReportadas", fields: [reportadoPorId], references: [id])
  fechaDeteccion    DateTime
  adjuntos          Json?
  estado            EstadoFalla
  asignadoAId       String?
  asignadoA         User?    @relation("FallaAsignadaA", fields: [asignadoAId], references: [id])
  bitacora          FallaBitacora[]
  accionesTomadas   String?
  piezasUtilizadas  Json?
  pruebasPost       String?
  fechaResolucion   DateTime?
  causaRaiz         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model FallaBitacora {
  id                String              @id @default(cuid())
  displayId         String              @unique
  fallaId           String
  falla             Falla    @relation(fields: [fallaId], references: [id])
  usuarioId         String
  usuario           User     @relation("FallaBitacoraUsuario", fields: [usuarioId], references: [id])
  mensaje           String
  fecha             DateTime @default(now())
  adjuntos          Json?
  tipo              String   // "comentario", "cambio_estado", etc.
}

model IdCounter {
  entityName     String @unique
  lastUsedNumber Int    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}